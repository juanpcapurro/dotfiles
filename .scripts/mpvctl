#!/bin/sh
# This script requires:
# - that the directory $HOME/.mpv exist 
# - that the program socat be installed
# - that you start mpv with the unix socket feature pointing at that directory
#   I recommend an alias in your .bashrc or equivalent file:
#       alias mpv="mpv --input-unix-socket=$HOME/.mpv/socket"

socket="$HOME/.mpv/socket"

mpvcommand() {
    # JSON preamble.
    local tosend='{ "command": ['
    # adding in the parameters.
    for arg in "$@"; do
        tosend="$tosend \"$arg\","
    done
    # closing it up.
    tosend=${tosend%?}' ] }'
    # send it along and ignore output.
    # to print output just remove the redirection to /dev/null
    echo $tosend | socat - $socket
}

# top level commands, meant to notify the user
if [ "$1" = "stop" ] ; then
  # exit mpv
  mpvcommand 'quit'
  notify-send "exiting mpv"
elif [ "$1" = "play-pause" ] ; then
  # toggle play-pause
  if [ "$(mpvctl get-paused)" == "true" ] ; then
    notify-send "playing"
  else
    notify-send "paused"
  mpvcommand 'cycle' 'pause'
  fi
elif [ "$1" = "pause" ] ; then
  # stop playing
  mpvcommand 'set' 'pause' 'yes'
  notify-send "paused"
elif [ "$1" = "play" ] ; then
  # start playing
  mpvcommand 'set' 'pause' 'no'
  notify-send "playing"
elif [ "$1" = "next" ] ; then
  # play next item in playlist
  mpvcommand 'playlist_next'
  notify-send "next"
elif [ "$1" = "previous" ] ; then
  # play previous item in playlist
  mpvcommand 'playlist_prev'
  notify-send "previous"
elif [ "$1" = "move-forward" ] ; then
  # go forward 10s
  mpvcommand seek 10 relative
  notify-send "+10s"
elif [ "$1" = "move-backwards" ] ; then
  # go back 10s
  mpvcommand seek -10 relative
  notify-send -- "-10s"

# commands meant to be called from other scripts/programs
elif [ "$1" = "add" ] ; then
  # add item(s) to current playlist
  shift &&\
  for video in "$@"; do
      mpvcommand 'loadfile' "$video" 'append-play';
  done;
elif [ "$1" = "title" ] ; then
  # don't allow non-printable caracters or anything that can be parsed as json or other weird things
  mpvcommand 'get_property_string' 'media-title' | jq -j ".data" |tr -cd [:alnum:],[:blank:]
elif [ "$1" = "raw-command" ] ; then
  # run an arbitrary command from mpv api
  shift && mpvcommand $@;
elif [ "$1" = "get-path" ] ; then
  # get url for youtube or filename if from filesystem
  mpvcommand 'get_property_string' 'path'| jq -j ".data"
elif [ "$1" = "get-paused" ] ; then
  # true if the media is paused
  mpvcommand 'get_property_string' 'pause'| jq -j ".data"
elif [ "$1" = "get-progress-seconds" ] ; then
  mpvcommand get_property_string time-pos |jq -j ".data"|sed 's/\..*$//g'
elif [ "$1" = "get-duration-seconds" ] ; then
  mpvcommand get_property_string duration |jq -j ".data"|sed 's/\..*$//g'
else
  exit 1
fi

pkill -SIGRTMIN+11 i3blocks
