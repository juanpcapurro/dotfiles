#compdef forge

autoload -U is-at-least

_forge() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
":: :_forge_commands" \
"*::: :->forge" \
&& ret=0
    case $state in
    (forge)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:forge-command-$line[1]:"
        case $line[1] in
            (test)
_arguments "${_arguments_options[@]}" \
'--gas-limit=[the block gas limit]:GAS_LIMIT: ' \
'--chain-id=[the chainid opcode value]:CHAIN_ID: ' \
'--gas-price=[the tx.gasprice value during EVM execution]:GAS_PRICE: ' \
'--block-base-fee-per-gas=[the base fee in a block]:BLOCK_BASE_FEE_PER_GAS: ' \
'--tx-origin=[the tx.origin value during EVM execution]:TX_ORIGIN: ' \
'--block-coinbase=[the block.coinbase value during EVM execution]:BLOCK_COINBASE: ' \
'--block-timestamp=[the block.timestamp value during EVM execution]:BLOCK_TIMESTAMP: ' \
'--block-number=[the block.number value during EVM execution]:BLOCK_NUMBER: ' \
'--block-difficulty=[the block.difficulty value during EVM execution]:BLOCK_DIFFICULTY: ' \
'--block-gas-limit=[the block.gaslimit value during EVM execution]:BLOCK_GAS_LIMIT: ' \
'-e+[the EVM type you want to use (e.g. sputnik)]:EVM_TYPE: ' \
'--evm-type=[the EVM type you want to use (e.g. sputnik)]:EVM_TYPE: ' \
'-f+[fetch state over a remote instead of starting from empty state]:FORK_URL: ' \
'--fork-url=[fetch state over a remote instead of starting from empty state]:FORK_URL: ' \
'--fork-block-number=[pins the block number for the state fork]:FORK_BLOCK_NUMBER: ' \
'--initial-balance=[the initial balance of each deployed test contract]:INITIAL_BALANCE: ' \
'--sender=[the address which will be executing all tests]:SENDER: ' \
'-m+[only run test methods matching regex (deprecated, see --match-test)]:PATTERN: ' \
'--match=[only run test methods matching regex (deprecated, see --match-test)]:PATTERN: ' \
'(-m --match)--match-test=[only run test methods matching regex]:TEST_PATTERN: ' \
'(-m --match)--no-match-test=[only run test methods not matching regex]:TEST_PATTERN_INVERSE: ' \
'(-m --match)--match-contract=[only run test methods in contracts matching regex]:CONTRACT_PATTERN: ' \
'(-m --match)--no-match-contract=[only run test methods in contracts not matching regex]:CONTRACT_PATTERN_INVERSE: ' \
'(-m --match)--match-path=[only run test methods in source files at path matching regex. Requires absolute path]:PATH_PATTERN: ' \
'(-m --match)--no-match-path=[only run test methods in source files at path not matching regex. Requires absolute path]:PATH_PATTERN_INVERSE: ' \
'--root=[the project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'-c+[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'--contracts=[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'*-r+[the remappings]:REMAPPINGS: ' \
'*--remappings=[the remappings]:REMAPPINGS: ' \
'--remappings-env=[the env var that holds remappings]:REMAPPINGS_ENV: ' \
'--cache-path=[the path where cached compiled contracts are stored]:CACHE_PATH:_files -/' \
'*--lib-paths=[the paths where your libraries are installed]:LIB_PATHS:_files -/' \
'-o+[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--out=[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--evm-version=[Choose the evm version]:EVM_VERSION: ' \
'--optimize-runs=[Optimizer parameter runs]:OPTIMIZE_RUNS: ' \
'*--extra-output=[Extra output types to include in the contract'\''s json artifact \[evm.assembly, ewasm, ir, irOptimized, metadata\] eg: `--extra-output evm.assembly`]:EXTRA_OUTPUT: ' \
'*--extra-output-files=[Extra output types to write to a separate file \[metadata, ir, irOptimized, ewasm\] eg: `--extra-output-files metadata`]:EXTRA_OUTPUT_FILES: ' \
'*--ignored-error-codes=[ignore warnings with specific error codes]:IGNORED_ERROR_CODES: ' \
'--use=[specify the solc version or path to a local solc to run with.This accepts values of the form `x.y.z`, `solc:x.y.z` or `path/to/existing/solc`]:use: ' \
'*--libraries=[add linked libraries]:LIBRARIES: ' \
'-d+[File updates debounce delay]:DELAY: ' \
'--delay=[File updates debounce delay]:DELAY: ' \
'-w+[Watch specific file(s) or folder(s)]:path: ' \
'--watch=[Watch specific file(s) or folder(s)]:path: ' \
'-j[print the test results in json format]' \
'--json[print the test results in json format]' \
'--gas-report[print a gas report]' \
'--ffi[enables the FFI cheatcode]' \
'*-v[Verbosity mode of EVM output as number of occurences of the `v` flag (-v, -vv, -vvv, etc.)
    2: print test logs for all tests
    3: print test trace for failing tests
    4: always print test trace, print setup for failing tests
    5: always print test trace and setup
]' \
'*--verbosity[Verbosity mode of EVM output as number of occurences of the `v` flag (-v, -vv, -vvv, etc.)
    2: print test logs for all tests
    3: print test trace for failing tests
    4: always print test trace, print setup for failing tests
    5: always print test trace and setup
]' \
'--debug[enable debugger]' \
'--optimize[Activate the solidity optimizer]' \
'--names[print compiled contract names]' \
'--sizes[print compiled contract sizes]' \
'--no-auto-detect[if set to true, skips auto-detecting solc and uses what is in the user'\''s $PATH ]' \
'--offline[if set to true, runs without accessing the network (missing solc versions will not be installed)]' \
'--force[force recompilation of the project, deletes the cache and artifacts folders]' \
'(-c --contracts)--hardhat[uses hardhat style project layout. This a convenience flag and is the same as `--contracts contracts --lib-paths node_modules`]' \
'--no-restart[Don’t restart command while it’s still running]' \
'--run-all[Explicitly run all tests on change]' \
'--allow-failure[if set to true, the process will exit with an exit code = 0, even if the tests fail]' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(bind)
_arguments "${_arguments_options[@]}" \
'--root=[The project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'-b+[Path to where the contract artifacts are stored]:BINDINGS:_files -/' \
'--bindings-path=[Path to where the contract artifacts are stored]:BINDINGS:_files -/' \
'--crate-name=[The name of the rust crate to generate. This should be a valid crates.io crate name. However, it is not currently validated by this command.]:CRATE_NAME: ' \
'--crate-version=[The version of the rust crate to generate. This should be a standard semver version string. However, it is not currently validated by this command.]:CRATE_VERSION: ' \
'--module[Generate the bindings as a module instead of a crate]' \
'--overwrite[Overwrite existing generated bindings. If set to false, the command will check that the bindings are correct, and then exit. If set to true, it will instead delete and overwrite the bindings.]' \
'--single-file[Generate bindings as a single file.]' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(build)
_arguments "${_arguments_options[@]}" \
'--root=[the project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'-c+[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'--contracts=[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'*-r+[the remappings]:REMAPPINGS: ' \
'*--remappings=[the remappings]:REMAPPINGS: ' \
'--remappings-env=[the env var that holds remappings]:REMAPPINGS_ENV: ' \
'--cache-path=[the path where cached compiled contracts are stored]:CACHE_PATH:_files -/' \
'*--lib-paths=[the paths where your libraries are installed]:LIB_PATHS:_files -/' \
'-o+[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--out=[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--evm-version=[Choose the evm version]:EVM_VERSION: ' \
'--optimize-runs=[Optimizer parameter runs]:OPTIMIZE_RUNS: ' \
'*--extra-output=[Extra output types to include in the contract'\''s json artifact \[evm.assembly, ewasm, ir, irOptimized, metadata\] eg: `--extra-output evm.assembly`]:EXTRA_OUTPUT: ' \
'*--extra-output-files=[Extra output types to write to a separate file \[metadata, ir, irOptimized, ewasm\] eg: `--extra-output-files metadata`]:EXTRA_OUTPUT_FILES: ' \
'*--ignored-error-codes=[ignore warnings with specific error codes]:IGNORED_ERROR_CODES: ' \
'--use=[specify the solc version or path to a local solc to run with.This accepts values of the form `x.y.z`, `solc:x.y.z` or `path/to/existing/solc`]:use: ' \
'*--libraries=[add linked libraries]:LIBRARIES: ' \
'-d+[File updates debounce delay]:DELAY: ' \
'--delay=[File updates debounce delay]:DELAY: ' \
'-w+[Watch specific file(s) or folder(s)]:path: ' \
'--watch=[Watch specific file(s) or folder(s)]:path: ' \
'--optimize[Activate the solidity optimizer]' \
'--names[print compiled contract names]' \
'--sizes[print compiled contract sizes]' \
'--no-auto-detect[if set to true, skips auto-detecting solc and uses what is in the user'\''s $PATH ]' \
'--offline[if set to true, runs without accessing the network (missing solc versions will not be installed)]' \
'--force[force recompilation of the project, deletes the cache and artifacts folders]' \
'(-c --contracts)--hardhat[uses hardhat style project layout. This a convenience flag and is the same as `--contracts contracts --lib-paths node_modules`]' \
'--no-restart[Don’t restart command while it’s still running]' \
'--run-all[Explicitly run all tests on change]' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" \
'--gas-limit=[the block gas limit]:GAS_LIMIT: ' \
'--chain-id=[the chainid opcode value]:CHAIN_ID: ' \
'--gas-price=[the tx.gasprice value during EVM execution]:GAS_PRICE: ' \
'--block-base-fee-per-gas=[the base fee in a block]:BLOCK_BASE_FEE_PER_GAS: ' \
'--tx-origin=[the tx.origin value during EVM execution]:TX_ORIGIN: ' \
'--block-coinbase=[the block.coinbase value during EVM execution]:BLOCK_COINBASE: ' \
'--block-timestamp=[the block.timestamp value during EVM execution]:BLOCK_TIMESTAMP: ' \
'--block-number=[the block.number value during EVM execution]:BLOCK_NUMBER: ' \
'--block-difficulty=[the block.difficulty value during EVM execution]:BLOCK_DIFFICULTY: ' \
'--block-gas-limit=[the block.gaslimit value during EVM execution]:BLOCK_GAS_LIMIT: ' \
'-e+[the EVM type you want to use (e.g. sputnik)]:EVM_TYPE: ' \
'--evm-type=[the EVM type you want to use (e.g. sputnik)]:EVM_TYPE: ' \
'-f+[fetch state over a remote instead of starting from empty state]:FORK_URL: ' \
'--fork-url=[fetch state over a remote instead of starting from empty state]:FORK_URL: ' \
'--fork-block-number=[pins the block number for the state fork]:FORK_BLOCK_NUMBER: ' \
'--initial-balance=[the initial balance of each deployed test contract]:INITIAL_BALANCE: ' \
'--sender=[the address which will be executing all tests]:SENDER: ' \
'--root=[the project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'-c+[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'--contracts=[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'*-r+[the remappings]:REMAPPINGS: ' \
'*--remappings=[the remappings]:REMAPPINGS: ' \
'--remappings-env=[the env var that holds remappings]:REMAPPINGS_ENV: ' \
'--cache-path=[the path where cached compiled contracts are stored]:CACHE_PATH:_files -/' \
'*--lib-paths=[the paths where your libraries are installed]:LIB_PATHS:_files -/' \
'-o+[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--out=[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--evm-version=[Choose the evm version]:EVM_VERSION: ' \
'--optimize-runs=[Optimizer parameter runs]:OPTIMIZE_RUNS: ' \
'*--extra-output=[Extra output types to include in the contract'\''s json artifact \[evm.assembly, ewasm, ir, irOptimized, metadata\] eg: `--extra-output evm.assembly`]:EXTRA_OUTPUT: ' \
'*--extra-output-files=[Extra output types to write to a separate file \[metadata, ir, irOptimized, ewasm\] eg: `--extra-output-files metadata`]:EXTRA_OUTPUT_FILES: ' \
'*--ignored-error-codes=[ignore warnings with specific error codes]:IGNORED_ERROR_CODES: ' \
'--use=[specify the solc version or path to a local solc to run with.This accepts values of the form `x.y.z`, `solc:x.y.z` or `path/to/existing/solc`]:use: ' \
'*--libraries=[add linked libraries]:LIBRARIES: ' \
'-d+[File updates debounce delay]:DELAY: ' \
'--delay=[File updates debounce delay]:DELAY: ' \
'-w+[Watch specific file(s) or folder(s)]:path: ' \
'--watch=[Watch specific file(s) or folder(s)]:path: ' \
'-t+[the contract you want to call and deploy, only necessary if there are more than 1 contract (Interfaces do not count) definitions on the script]:TARGET_CONTRACT: ' \
'--target-contract=[the contract you want to call and deploy, only necessary if there are more than 1 contract (Interfaces do not count) definitions on the script]:TARGET_CONTRACT: ' \
'-s+[the function you want to call on the script contract, defaults to run()]:SIG: ' \
'--sig=[the function you want to call on the script contract, defaults to run()]:SIG: ' \
'--ffi[enables the FFI cheatcode]' \
'*-v[Verbosity mode of EVM output as number of occurences of the `v` flag (-v, -vv, -vvv, etc.)
    2: print test logs for all tests
    3: print test trace for failing tests
    4: always print test trace, print setup for failing tests
    5: always print test trace and setup
]' \
'*--verbosity[Verbosity mode of EVM output as number of occurences of the `v` flag (-v, -vv, -vvv, etc.)
    2: print test logs for all tests
    3: print test trace for failing tests
    4: always print test trace, print setup for failing tests
    5: always print test trace and setup
]' \
'--debug[enable debugger]' \
'--optimize[Activate the solidity optimizer]' \
'--names[print compiled contract names]' \
'--sizes[print compiled contract sizes]' \
'--no-auto-detect[if set to true, skips auto-detecting solc and uses what is in the user'\''s $PATH ]' \
'--offline[if set to true, runs without accessing the network (missing solc versions will not be installed)]' \
'--force[force recompilation of the project, deletes the cache and artifacts folders]' \
'(-c --contracts)--hardhat[uses hardhat style project layout. This a convenience flag and is the same as `--contracts contracts --lib-paths node_modules`]' \
'--no-restart[Don’t restart command while it’s still running]' \
'--run-all[Explicitly run all tests on change]' \
'-h[Print help information]' \
'--help[Print help information]' \
':path -- the path to the contract to run:_files' \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::lib -- The submodule name of the library you want to update (will update all if none is provided):_files -/' \
&& ret=0
;;
(install)
_arguments "${_arguments_options[@]}" \
'--root=[the project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'--no-git[install without creating a submodule repository]' \
'--no-commit[do not create a commit]' \
'-q[do not print messages]' \
'--quiet[do not print messages]' \
'-h[Print help information]' \
'--help[Print help information]' \
'*::dependencies -- installs one or more dependencies as git submodules (will install existing dependencies if no arguments are provided):' \
&& ret=0
;;
(remove)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'*::dependencies -- The submodule name of the library you want to remove:' \
&& ret=0
;;
(remappings)
_arguments "${_arguments_options[@]}" \
'--root=[the project'\''s root path, default being the current working directory]:ROOT:_files -/' \
'*--lib-paths=[the paths where your libraries are installed]:LIB_PATHS:_files -/' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(verify-contract)
_arguments "${_arguments_options[@]}" \
'--constructor-args=[the encoded constructor arguments]:CONSTRUCTOR_ARGS: ' \
'--compiler-version=[the compiler version used during build]:COMPILER_VERSION: ' \
'--num-of-optimizations=[the number of optimization runs used]:NUM_OF_OPTIMIZATIONS: ' \
'--chain-id=[the chain id of the network you are verifying for]:CHAIN_ID: ' \
'--root=[the project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'-c+[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'--contracts=[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'*-r+[the remappings]:REMAPPINGS: ' \
'*--remappings=[the remappings]:REMAPPINGS: ' \
'--remappings-env=[]:REMAPPINGS_ENV: ' \
'--cache-path=[the path where cached compiled contracts are stored]:CACHE_PATH:_files -/' \
'*--lib-paths=[the paths where your libraries are installed]:LIB_PATHS:_files -/' \
'(-c --contracts)--hardhat[uses hardhat style project layout. This a convenience flag and is the same as `--contracts contracts --lib-paths node_modules`]' \
'-h[Print help information]' \
'--help[Print help information]' \
':address -- the target contract address:' \
':contract -- the contract source info `<path>\:<contractname>`:' \
':etherscan-key -- your etherscan api key:' \
&& ret=0
;;
(verify-check)
_arguments "${_arguments_options[@]}" \
'--chain-id=[the chain id of the network you are verifying for]:CHAIN_ID: ' \
'-h[Print help information]' \
'--help[Print help information]' \
':guid -- the verification guid:' \
':etherscan-key -- your etherscan api key:' \
&& ret=0
;;
(create)
_arguments "${_arguments_options[@]}" \
'(--constructor-args-path)*--constructor-args=[constructor args calldata arguments]:constructor_args: ' \
'(--constructor-args)--constructor-args-path=[path to a file containing the constructor args]:constructor_args_path:_files' \
'--root=[the project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'-c+[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'--contracts=[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'*-r+[the remappings]:REMAPPINGS: ' \
'*--remappings=[the remappings]:REMAPPINGS: ' \
'--remappings-env=[the env var that holds remappings]:REMAPPINGS_ENV: ' \
'--cache-path=[the path where cached compiled contracts are stored]:CACHE_PATH:_files -/' \
'*--lib-paths=[the paths where your libraries are installed]:LIB_PATHS:_files -/' \
'-o+[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--out=[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--evm-version=[Choose the evm version]:EVM_VERSION: ' \
'--optimize-runs=[Optimizer parameter runs]:OPTIMIZE_RUNS: ' \
'*--extra-output=[Extra output types to include in the contract'\''s json artifact \[evm.assembly, ewasm, ir, irOptimized, metadata\] eg: `--extra-output evm.assembly`]:EXTRA_OUTPUT: ' \
'*--extra-output-files=[Extra output types to write to a separate file \[metadata, ir, irOptimized, ewasm\] eg: `--extra-output-files metadata`]:EXTRA_OUTPUT_FILES: ' \
'*--ignored-error-codes=[ignore warnings with specific error codes]:IGNORED_ERROR_CODES: ' \
'--use=[specify the solc version or path to a local solc to run with.This accepts values of the form `x.y.z`, `solc:x.y.z` or `path/to/existing/solc`]:use: ' \
'*--libraries=[add linked libraries]:LIBRARIES: ' \
'-d+[File updates debounce delay]:DELAY: ' \
'--delay=[File updates debounce delay]:DELAY: ' \
'-w+[Watch specific file(s) or folder(s)]:path: ' \
'--watch=[Watch specific file(s) or folder(s)]:path: ' \
'--rpc-url=[The tracing / archival node'\''s URL]:RPC_URL: ' \
'-f+[The sender account]:FROM: ' \
'--from=[The sender account]:FROM: ' \
'--private-key=[Your private key string]:PRIVATE_KEY: ' \
'--keystore=[Path to your keystore folder / file]:KEYSTORE_PATH: ' \
'--password=[Your keystore password]:KEYSTORE_PASSWORD: ' \
'--mnemonic-path=[Path to your mnemonic file]:MNEMONIC_PATH: ' \
'--hd-path=[Derivation path for your hardware wallet (trezor or ledger)]:HD_PATH: ' \
'--mnemonic-index=[your index in the standard hd path]:MNEMONIC_INDEX: ' \
'--etherscan-api-key=[]:ETHERSCAN_API_KEY: ' \
'--chain=[]:CHAIN: ' \
'--gas-price=[gas price for legacy txs or maxFeePerGas for EIP1559 txs]:GAS_PRICE: ' \
'--priority-fee=[gas priority fee for EIP1559 txs]:PRIORITY_FEE: ' \
'--value=[value to send with the contract creation tx]:VALUE: ' \
'--optimize[Activate the solidity optimizer]' \
'--names[print compiled contract names]' \
'--sizes[print compiled contract sizes]' \
'--no-auto-detect[if set to true, skips auto-detecting solc and uses what is in the user'\''s $PATH ]' \
'--offline[if set to true, runs without accessing the network (missing solc versions will not be installed)]' \
'--force[force recompilation of the project, deletes the cache and artifacts folders]' \
'(-c --contracts)--hardhat[uses hardhat style project layout. This a convenience flag and is the same as `--contracts contracts --lib-paths node_modules`]' \
'--no-restart[Don’t restart command while it’s still running]' \
'--run-all[Explicitly run all tests on change]' \
'-i[Interactive prompt to insert your private key]' \
'--interactive[Interactive prompt to insert your private key]' \
'-l[Use your Ledger hardware wallet]' \
'--ledger[Use your Ledger hardware wallet]' \
'-t[Use your Trezor hardware wallet]' \
'--trezor[Use your Trezor hardware wallet]' \
'--flashbots[Use the flashbots RPC URL (https://rpc.flashbots.net)]' \
'--legacy[use legacy transactions instead of EIP1559 ones. this is auto-enabled for common networks without EIP1559]' \
'-h[Print help information]' \
'--help[Print help information]' \
':contract -- contract source info `<path>\:<contractname>` or `<contractname>`:' \
&& ret=0
;;
(init)
_arguments "${_arguments_options[@]}" \
'-t+[optional solidity template to start from]:TEMPLATE: ' \
'--template=[optional solidity template to start from]:TEMPLATE: ' \
'(-t --template)--no-git[initialize without creating a git repository]' \
'(-t --template)--no-commit[do not create initial commit]' \
'-q[do not print messages]' \
'--quiet[do not print messages]' \
'(-t --template)--offline[run without installing libs from the network]' \
'(-t --template)--force[force init if project dir is not empty]' \
'(-t --template)--vscode[initialize .vscode/settings.json file with solidity settings and generate a remappings.txt file.]' \
'-h[Print help information]' \
'--help[Print help information]' \
'::root -- the project'\''s root path, default being the current working directory:_files -/' \
&& ret=0
;;
(completions)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':shell:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(clean)
_arguments "${_arguments_options[@]}" \
'--root=[The project'\''s root path, default being the current working directory]:ROOT:_files -/' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(snapshot)
_arguments "${_arguments_options[@]}" \
'--gas-limit=[the block gas limit]:GAS_LIMIT: ' \
'--chain-id=[the chainid opcode value]:CHAIN_ID: ' \
'--gas-price=[the tx.gasprice value during EVM execution]:GAS_PRICE: ' \
'--block-base-fee-per-gas=[the base fee in a block]:BLOCK_BASE_FEE_PER_GAS: ' \
'--tx-origin=[the tx.origin value during EVM execution]:TX_ORIGIN: ' \
'--block-coinbase=[the block.coinbase value during EVM execution]:BLOCK_COINBASE: ' \
'--block-timestamp=[the block.timestamp value during EVM execution]:BLOCK_TIMESTAMP: ' \
'--block-number=[the block.number value during EVM execution]:BLOCK_NUMBER: ' \
'--block-difficulty=[the block.difficulty value during EVM execution]:BLOCK_DIFFICULTY: ' \
'--block-gas-limit=[the block.gaslimit value during EVM execution]:BLOCK_GAS_LIMIT: ' \
'-e+[the EVM type you want to use (e.g. sputnik)]:EVM_TYPE: ' \
'--evm-type=[the EVM type you want to use (e.g. sputnik)]:EVM_TYPE: ' \
'-f+[fetch state over a remote instead of starting from empty state]:FORK_URL: ' \
'--fork-url=[fetch state over a remote instead of starting from empty state]:FORK_URL: ' \
'--fork-block-number=[pins the block number for the state fork]:FORK_BLOCK_NUMBER: ' \
'--initial-balance=[the initial balance of each deployed test contract]:INITIAL_BALANCE: ' \
'--sender=[the address which will be executing all tests]:SENDER: ' \
'-m+[only run test methods matching regex (deprecated, see --match-test)]:PATTERN: ' \
'--match=[only run test methods matching regex (deprecated, see --match-test)]:PATTERN: ' \
'(-m --match)--match-test=[only run test methods matching regex]:TEST_PATTERN: ' \
'(-m --match)--no-match-test=[only run test methods not matching regex]:TEST_PATTERN_INVERSE: ' \
'(-m --match)--match-contract=[only run test methods in contracts matching regex]:CONTRACT_PATTERN: ' \
'(-m --match)--no-match-contract=[only run test methods in contracts not matching regex]:CONTRACT_PATTERN_INVERSE: ' \
'(-m --match)--match-path=[only run test methods in source files at path matching regex. Requires absolute path]:PATH_PATTERN: ' \
'(-m --match)--no-match-path=[only run test methods in source files at path not matching regex. Requires absolute path]:PATH_PATTERN_INVERSE: ' \
'--root=[the project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'-c+[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'--contracts=[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'*-r+[the remappings]:REMAPPINGS: ' \
'*--remappings=[the remappings]:REMAPPINGS: ' \
'--remappings-env=[the env var that holds remappings]:REMAPPINGS_ENV: ' \
'--cache-path=[the path where cached compiled contracts are stored]:CACHE_PATH:_files -/' \
'*--lib-paths=[the paths where your libraries are installed]:LIB_PATHS:_files -/' \
'-o+[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--out=[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--evm-version=[Choose the evm version]:EVM_VERSION: ' \
'--optimize-runs=[Optimizer parameter runs]:OPTIMIZE_RUNS: ' \
'*--extra-output=[Extra output types to include in the contract'\''s json artifact \[evm.assembly, ewasm, ir, irOptimized, metadata\] eg: `--extra-output evm.assembly`]:EXTRA_OUTPUT: ' \
'*--extra-output-files=[Extra output types to write to a separate file \[metadata, ir, irOptimized, ewasm\] eg: `--extra-output-files metadata`]:EXTRA_OUTPUT_FILES: ' \
'*--ignored-error-codes=[ignore warnings with specific error codes]:IGNORED_ERROR_CODES: ' \
'--use=[specify the solc version or path to a local solc to run with.This accepts values of the form `x.y.z`, `solc:x.y.z` or `path/to/existing/solc`]:use: ' \
'*--libraries=[add linked libraries]:LIBRARIES: ' \
'-d+[File updates debounce delay]:DELAY: ' \
'--delay=[File updates debounce delay]:DELAY: ' \
'-w+[Watch specific file(s) or folder(s)]:path: ' \
'--watch=[Watch specific file(s) or folder(s)]:path: ' \
'--min=[Only include tests that used more gas that the given amount.]:MIN: ' \
'--max=[Only include tests that used less gas that the given amount.]:MAX: ' \
'(--snap)--diff=[Compare against a snapshot and display changes from the snapshot. Takes an optional snapshot file, \[default: .gas-snapshot\]]:SNAPSHOT_FILE:_files' \
'(--diff)--check=[Run snapshot in '\''check'\'' mode and compares against an existing snapshot file, \[default: .gas-snapshot\]. Exits with 0 if snapshots match. Exits with 1 and prints a diff otherwise]:SNAPSHOT_FILE:_files' \
'--format=[How to format the output.]:FORMAT: ' \
'--snap=[Output file for the snapshot.]:SNAPSHOT_FILE: ' \
'-j[print the test results in json format]' \
'--json[print the test results in json format]' \
'--gas-report[print a gas report]' \
'--ffi[enables the FFI cheatcode]' \
'*-v[Verbosity mode of EVM output as number of occurences of the `v` flag (-v, -vv, -vvv, etc.)
    2: print test logs for all tests
    3: print test trace for failing tests
    4: always print test trace, print setup for failing tests
    5: always print test trace and setup
]' \
'*--verbosity[Verbosity mode of EVM output as number of occurences of the `v` flag (-v, -vv, -vvv, etc.)
    2: print test logs for all tests
    3: print test trace for failing tests
    4: always print test trace, print setup for failing tests
    5: always print test trace and setup
]' \
'--debug[enable debugger]' \
'--optimize[Activate the solidity optimizer]' \
'--names[print compiled contract names]' \
'--sizes[print compiled contract sizes]' \
'--no-auto-detect[if set to true, skips auto-detecting solc and uses what is in the user'\''s $PATH ]' \
'--offline[if set to true, runs without accessing the network (missing solc versions will not be installed)]' \
'--force[force recompilation of the project, deletes the cache and artifacts folders]' \
'(-c --contracts)--hardhat[uses hardhat style project layout. This a convenience flag and is the same as `--contracts contracts --lib-paths node_modules`]' \
'--no-restart[Don’t restart command while it’s still running]' \
'--run-all[Explicitly run all tests on change]' \
'--allow-failure[if set to true, the process will exit with an exit code = 0, even if the tests fail]' \
'--asc[sort results by ascending gas used.]' \
'(--asc)--desc[sort results by descending gas used.]' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" \
'--root=[the project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'-c+[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'--contracts=[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'*-r+[the remappings]:REMAPPINGS: ' \
'*--remappings=[the remappings]:REMAPPINGS: ' \
'--remappings-env=[the env var that holds remappings]:REMAPPINGS_ENV: ' \
'--cache-path=[the path where cached compiled contracts are stored]:CACHE_PATH:_files -/' \
'*--lib-paths=[the paths where your libraries are installed]:LIB_PATHS:_files -/' \
'-o+[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--out=[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--evm-version=[Choose the evm version]:EVM_VERSION: ' \
'--optimize-runs=[Optimizer parameter runs]:OPTIMIZE_RUNS: ' \
'*--extra-output=[Extra output types to include in the contract'\''s json artifact \[evm.assembly, ewasm, ir, irOptimized, metadata\] eg: `--extra-output evm.assembly`]:EXTRA_OUTPUT: ' \
'*--extra-output-files=[Extra output types to write to a separate file \[metadata, ir, irOptimized, ewasm\] eg: `--extra-output-files metadata`]:EXTRA_OUTPUT_FILES: ' \
'*--ignored-error-codes=[ignore warnings with specific error codes]:IGNORED_ERROR_CODES: ' \
'--use=[specify the solc version or path to a local solc to run with.This accepts values of the form `x.y.z`, `solc:x.y.z` or `path/to/existing/solc`]:use: ' \
'*--libraries=[add linked libraries]:LIBRARIES: ' \
'-d+[File updates debounce delay]:DELAY: ' \
'--delay=[File updates debounce delay]:DELAY: ' \
'-w+[Watch specific file(s) or folder(s)]:path: ' \
'--watch=[Watch specific file(s) or folder(s)]:path: ' \
'--gas-limit=[the block gas limit]:GAS_LIMIT: ' \
'--chain-id=[the chainid opcode value]:CHAIN_ID: ' \
'--gas-price=[the tx.gasprice value during EVM execution]:GAS_PRICE: ' \
'--block-base-fee-per-gas=[the base fee in a block]:BLOCK_BASE_FEE_PER_GAS: ' \
'--tx-origin=[the tx.origin value during EVM execution]:TX_ORIGIN: ' \
'--block-coinbase=[the block.coinbase value during EVM execution]:BLOCK_COINBASE: ' \
'--block-timestamp=[the block.timestamp value during EVM execution]:BLOCK_TIMESTAMP: ' \
'--block-number=[the block.number value during EVM execution]:BLOCK_NUMBER: ' \
'--block-difficulty=[the block.difficulty value during EVM execution]:BLOCK_DIFFICULTY: ' \
'--block-gas-limit=[the block.gaslimit value during EVM execution]:BLOCK_GAS_LIMIT: ' \
'-e+[the EVM type you want to use (e.g. sputnik)]:EVM_TYPE: ' \
'--evm-type=[the EVM type you want to use (e.g. sputnik)]:EVM_TYPE: ' \
'-f+[fetch state over a remote instead of starting from empty state]:FORK_URL: ' \
'--fork-url=[fetch state over a remote instead of starting from empty state]:FORK_URL: ' \
'--fork-block-number=[pins the block number for the state fork]:FORK_BLOCK_NUMBER: ' \
'--initial-balance=[the initial balance of each deployed test contract]:INITIAL_BALANCE: ' \
'--sender=[the address which will be executing all tests]:SENDER: ' \
'--json[prints currently set config values as json]' \
'--basic[prints basic set of currently set config values]' \
'--optimize[Activate the solidity optimizer]' \
'--names[print compiled contract names]' \
'--sizes[print compiled contract sizes]' \
'--no-auto-detect[if set to true, skips auto-detecting solc and uses what is in the user'\''s $PATH ]' \
'--offline[if set to true, runs without accessing the network (missing solc versions will not be installed)]' \
'--force[force recompilation of the project, deletes the cache and artifacts folders]' \
'(-c --contracts)--hardhat[uses hardhat style project layout. This a convenience flag and is the same as `--contracts contracts --lib-paths node_modules`]' \
'--no-restart[Don’t restart command while it’s still running]' \
'--run-all[Explicitly run all tests on change]' \
'--ffi[enables the FFI cheatcode]' \
'*-v[Verbosity mode of EVM output as number of occurences of the `v` flag (-v, -vv, -vvv, etc.)
    2: print test logs for all tests
    3: print test trace for failing tests
    4: always print test trace, print setup for failing tests
    5: always print test trace and setup
]' \
'*--verbosity[Verbosity mode of EVM output as number of occurences of the `v` flag (-v, -vv, -vvv, etc.)
    2: print test logs for all tests
    3: print test trace for failing tests
    4: always print test trace, print setup for failing tests
    5: always print test trace and setup
]' \
'--debug[enable debugger]' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(flatten)
_arguments "${_arguments_options[@]}" \
'-o+[output path for the flattened contract]:OUTPUT:_files' \
'--output=[output path for the flattened contract]:OUTPUT:_files' \
'--root=[the project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'-c+[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'--contracts=[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'*-r+[the remappings]:REMAPPINGS: ' \
'*--remappings=[the remappings]:REMAPPINGS: ' \
'--remappings-env=[]:REMAPPINGS_ENV: ' \
'--cache-path=[the path where cached compiled contracts are stored]:CACHE_PATH:_files -/' \
'*--lib-paths=[the paths where your libraries are installed]:LIB_PATHS:_files -/' \
'(-c --contracts)--hardhat[uses hardhat style project layout. This a convenience flag and is the same as `--contracts contracts --lib-paths node_modules`]' \
'-h[Print help information]' \
'--help[Print help information]' \
':target-path -- the path to the contract to flatten:_files' \
&& ret=0
;;
(inspect)
_arguments "${_arguments_options[@]}" \
'--root=[the project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'-c+[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'--contracts=[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'*-r+[the remappings]:REMAPPINGS: ' \
'*--remappings=[the remappings]:REMAPPINGS: ' \
'--remappings-env=[the env var that holds remappings]:REMAPPINGS_ENV: ' \
'--cache-path=[the path where cached compiled contracts are stored]:CACHE_PATH:_files -/' \
'*--lib-paths=[the paths where your libraries are installed]:LIB_PATHS:_files -/' \
'-o+[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--out=[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--evm-version=[Choose the evm version]:EVM_VERSION: ' \
'--optimize-runs=[Optimizer parameter runs]:OPTIMIZE_RUNS: ' \
'*--extra-output=[Extra output types to include in the contract'\''s json artifact \[evm.assembly, ewasm, ir, irOptimized, metadata\] eg: `--extra-output evm.assembly`]:EXTRA_OUTPUT: ' \
'*--extra-output-files=[Extra output types to write to a separate file \[metadata, ir, irOptimized, ewasm\] eg: `--extra-output-files metadata`]:EXTRA_OUTPUT_FILES: ' \
'*--ignored-error-codes=[ignore warnings with specific error codes]:IGNORED_ERROR_CODES: ' \
'--use=[specify the solc version or path to a local solc to run with.This accepts values of the form `x.y.z`, `solc:x.y.z` or `path/to/existing/solc`]:use: ' \
'*--libraries=[add linked libraries]:LIBRARIES: ' \
'-d+[File updates debounce delay]:DELAY: ' \
'--delay=[File updates debounce delay]:DELAY: ' \
'-w+[Watch specific file(s) or folder(s)]:path: ' \
'--watch=[Watch specific file(s) or folder(s)]:path: ' \
'--optimize[Activate the solidity optimizer]' \
'--names[print compiled contract names]' \
'--sizes[print compiled contract sizes]' \
'--no-auto-detect[if set to true, skips auto-detecting solc and uses what is in the user'\''s $PATH ]' \
'--offline[if set to true, runs without accessing the network (missing solc versions will not be installed)]' \
'--force[force recompilation of the project, deletes the cache and artifacts folders]' \
'(-c --contracts)--hardhat[uses hardhat style project layout. This a convenience flag and is the same as `--contracts contracts --lib-paths node_modules`]' \
'--no-restart[Don’t restart command while it’s still running]' \
'--run-all[Explicitly run all tests on change]' \
'-h[Print help information]' \
'--help[Print help information]' \
':contract -- the contract to inspect:' \
':mode -- the contract artifact field to inspect:' \
&& ret=0
;;
(tree)
_arguments "${_arguments_options[@]}" \
'--root=[the project'\''s root path. By default, this is the root directory of the current Git repository or the current working directory if it is not part of a Git repository]:ROOT:_files -/' \
'-c+[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'--contracts=[the directory relative to the root under which the smart contracts are]:CONTRACTS:_files -/' \
'*-r+[the remappings]:REMAPPINGS: ' \
'*--remappings=[the remappings]:REMAPPINGS: ' \
'--remappings-env=[the env var that holds remappings]:REMAPPINGS_ENV: ' \
'--cache-path=[the path where cached compiled contracts are stored]:CACHE_PATH:_files -/' \
'*--lib-paths=[the paths where your libraries are installed]:LIB_PATHS:_files -/' \
'-o+[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--out=[path to where the contract artifacts are stored]:OUT_PATH:_files -/' \
'--evm-version=[Choose the evm version]:EVM_VERSION: ' \
'--optimize-runs=[Optimizer parameter runs]:OPTIMIZE_RUNS: ' \
'*--extra-output=[Extra output types to include in the contract'\''s json artifact \[evm.assembly, ewasm, ir, irOptimized, metadata\] eg: `--extra-output evm.assembly`]:EXTRA_OUTPUT: ' \
'*--extra-output-files=[Extra output types to write to a separate file \[metadata, ir, irOptimized, ewasm\] eg: `--extra-output-files metadata`]:EXTRA_OUTPUT_FILES: ' \
'*--ignored-error-codes=[ignore warnings with specific error codes]:IGNORED_ERROR_CODES: ' \
'--use=[specify the solc version or path to a local solc to run with.This accepts values of the form `x.y.z`, `solc:x.y.z` or `path/to/existing/solc`]:use: ' \
'*--libraries=[add linked libraries]:LIBRARIES: ' \
'-d+[File updates debounce delay]:DELAY: ' \
'--delay=[File updates debounce delay]:DELAY: ' \
'-w+[Watch specific file(s) or folder(s)]:path: ' \
'--watch=[Watch specific file(s) or folder(s)]:path: ' \
'--charset=[Character set to use in output: utf8, ascii]:CHARSET: ' \
'--optimize[Activate the solidity optimizer]' \
'--names[print compiled contract names]' \
'--sizes[print compiled contract sizes]' \
'--no-auto-detect[if set to true, skips auto-detecting solc and uses what is in the user'\''s $PATH ]' \
'--offline[if set to true, runs without accessing the network (missing solc versions will not be installed)]' \
'--force[force recompilation of the project, deletes the cache and artifacts folders]' \
'(-c --contracts)--hardhat[uses hardhat style project layout. This a convenience flag and is the same as `--contracts contracts --lib-paths node_modules`]' \
'--no-restart[Don’t restart command while it’s still running]' \
'--run-all[Explicitly run all tests on change]' \
'--no-dedupe[Do not de-duplicate (repeats all shared dependencies)]' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'*::subcommand -- The subcommand whose help message to display:' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_forge_commands] )) ||
_forge_commands() {
    local commands; commands=(
'test:Test your smart contracts' \
'bind:Generate rust bindings for your smart contracts' \
'build:Build your smart contracts' \
'run:Run a single smart contract as a script' \
'update:Fetches all upstream lib changes' \
'install:installs one or more dependencies as git submodules (will install existing dependencies if no arguments are provided)' \
'remove:Removes one or more dependencies from git submodules' \
'remappings:Prints the automatically inferred remappings for this repository' \
'verify-contract:Verify your smart contracts source code on Etherscan. Requires `ETHERSCAN_API_KEY` to be set.' \
'verify-check:Check verification status on Etherscan. Requires `ETHERSCAN_API_KEY` to be set.' \
'create:Deploy a compiled contract' \
'init:Initializes a new forge sample project' \
'completions:Generate shell completions script' \
'clean:Removes the build artifacts and cache directories' \
'snapshot:Creates a snapshot of each test'\''s gas usage' \
'config:Shows the currently set config values' \
'flatten:Concats a file with all of its imports' \
'inspect:Outputs a contract in a specified format (ir, assembly, ...)' \
'tree:Display a tree visualization of the project'\''s dependency graph' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'forge commands' commands "$@"
}
(( $+functions[_forge__bind_commands] )) ||
_forge__bind_commands() {
    local commands; commands=()
    _describe -t commands 'forge bind commands' commands "$@"
}
(( $+functions[_forge__build_commands] )) ||
_forge__build_commands() {
    local commands; commands=()
    _describe -t commands 'forge build commands' commands "$@"
}
(( $+functions[_forge__clean_commands] )) ||
_forge__clean_commands() {
    local commands; commands=()
    _describe -t commands 'forge clean commands' commands "$@"
}
(( $+functions[_forge__completions_commands] )) ||
_forge__completions_commands() {
    local commands; commands=()
    _describe -t commands 'forge completions commands' commands "$@"
}
(( $+functions[_forge__config_commands] )) ||
_forge__config_commands() {
    local commands; commands=()
    _describe -t commands 'forge config commands' commands "$@"
}
(( $+functions[_forge__create_commands] )) ||
_forge__create_commands() {
    local commands; commands=()
    _describe -t commands 'forge create commands' commands "$@"
}
(( $+functions[_forge__flatten_commands] )) ||
_forge__flatten_commands() {
    local commands; commands=()
    _describe -t commands 'forge flatten commands' commands "$@"
}
(( $+functions[_forge__help_commands] )) ||
_forge__help_commands() {
    local commands; commands=()
    _describe -t commands 'forge help commands' commands "$@"
}
(( $+functions[_forge__init_commands] )) ||
_forge__init_commands() {
    local commands; commands=()
    _describe -t commands 'forge init commands' commands "$@"
}
(( $+functions[_forge__inspect_commands] )) ||
_forge__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'forge inspect commands' commands "$@"
}
(( $+functions[_forge__install_commands] )) ||
_forge__install_commands() {
    local commands; commands=()
    _describe -t commands 'forge install commands' commands "$@"
}
(( $+functions[_forge__remappings_commands] )) ||
_forge__remappings_commands() {
    local commands; commands=()
    _describe -t commands 'forge remappings commands' commands "$@"
}
(( $+functions[_forge__remove_commands] )) ||
_forge__remove_commands() {
    local commands; commands=()
    _describe -t commands 'forge remove commands' commands "$@"
}
(( $+functions[_forge__run_commands] )) ||
_forge__run_commands() {
    local commands; commands=()
    _describe -t commands 'forge run commands' commands "$@"
}
(( $+functions[_forge__snapshot_commands] )) ||
_forge__snapshot_commands() {
    local commands; commands=()
    _describe -t commands 'forge snapshot commands' commands "$@"
}
(( $+functions[_forge__test_commands] )) ||
_forge__test_commands() {
    local commands; commands=()
    _describe -t commands 'forge test commands' commands "$@"
}
(( $+functions[_forge__tree_commands] )) ||
_forge__tree_commands() {
    local commands; commands=()
    _describe -t commands 'forge tree commands' commands "$@"
}
(( $+functions[_forge__update_commands] )) ||
_forge__update_commands() {
    local commands; commands=()
    _describe -t commands 'forge update commands' commands "$@"
}
(( $+functions[_forge__verify-check_commands] )) ||
_forge__verify-check_commands() {
    local commands; commands=()
    _describe -t commands 'forge verify-check commands' commands "$@"
}
(( $+functions[_forge__verify-contract_commands] )) ||
_forge__verify-contract_commands() {
    local commands; commands=()
    _describe -t commands 'forge verify-contract commands' commands "$@"
}

_forge "$@"
